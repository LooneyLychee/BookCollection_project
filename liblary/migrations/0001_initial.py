# Generated by Django 4.1.4 on 2022-12-09 15:12

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import liblary.validators


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Author',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('author', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='Book',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100)),
                ('series', models.CharField(blank=True, max_length=100, null=True)),
                ('volume', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0.01)])),
                ('publisher', models.CharField(blank=True, max_length=50)),
                ('publication_date', models.DateField(blank=True)),
                ('identifier', models.CharField(blank=True, max_length=13, null=True, validators=[liblary.validators.ISBNValidator])),
                ('page_count', models.PositiveSmallIntegerField(blank=True)),
                ('height', models.FloatField(blank=True, validators=[django.core.validators.MinValueValidator(0.01)])),
                ('width', models.FloatField(blank=True, validators=[django.core.validators.MinValueValidator(0.01)])),
                ('thickness', models.FloatField(blank=True, validators=[django.core.validators.MinValueValidator(0.01)])),
                ('cover', models.ImageField(default='https://i.ibb.co/tKtFPgr/blank-profile-picture-g9a1ddb035-640.png', upload_to='avatars/')),
                ('description', models.CharField(blank=True, max_length=300)),
                ('rating', models.PositiveSmallIntegerField(blank=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(5)])),
                ('notes', models.CharField(blank=True, max_length=300)),
                ('update', models.DateTimeField(auto_now=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('authors', models.ManyToManyField(blank=True, to='liblary.author')),
            ],
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('category', models.CharField(choices=[('nonclassifiable', 'nonclassifiable'), ('antiques & collectibles', 'antiques & collectibles'), ('architecture', 'architecture'), ('art', 'art'), ('bibles', 'bibles'), ('biography & autobiography', 'biography & autobiography'), ('body, mind & spirit', 'body, mind & spirit'), ('business & economics', 'business & economics'), ('comics and graphics', 'comics and graphics'), ('novels', 'novels'), ('computers', 'computers'), ('cooking', 'cooking'), ('craft & hobbies', 'craft & hobbies'), ('design', 'design'), ('drama', 'drama'), ('education', 'education'), ('family_relationships', 'family_relationships'), ('fiction', 'fiction'), ('foreign', 'foreign'), ('language', 'language'), ('study', 'study'), ('games_activities', 'games_activities'), ('gardening', 'gardening'), ('health & fitness', 'health & fitness'), ('history', 'history'), ('house & home', 'house & home'), ('humor', 'humor'), ('juvenile fiction', 'juvenile fiction'), ('juvenile nonfiction', 'juvenile nonfiction'), ('language arts & disciplines', 'language arts & disciplines'), ('law', 'law'), ('literary collections', 'literary collections'), ('literary_criticism', 'literary_criticism'), ('mathematics', 'mathematics'), ('medical', 'medical'), ('music', 'music'), ('nature', 'nature'), ('performing', 'performing'), ('arts', 'arts'), ('pets', 'pets'), ('philosophy', 'philosophy'), ('photography', 'photography'), ('poetry', 'poetry'), ('political_science', 'political_science'), ('psychology', 'psychology'), ('reference', 'reference'), ('religion', 'religion'), ('science', 'science'), ('self_help', 'self_help'), ('social_science', 'social_science'), ('sports &recreation', 'sports &recreation'), ('study_aids', 'study_aids'), ('technology_end_engineering', 'technology_end_engineering'), ('transportation', 'transportation'), ('travel', 'travel'), ('true crime', 'true crime'), ('young adult fiction', 'young adult fiction'), ('young adult nonfiction', 'young adult nonfiction')], max_length=30)),
            ],
            options={
                'verbose_name_plural': 'categories',
            },
        ),
        migrations.CreateModel(
            name='PurchaseInfo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('purchase_date', models.DateField(blank=True)),
                ('price', models.DateField(blank=True)),
            ],
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tag', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='ReadInfo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_date', models.DateField(blank=True)),
                ('end_date', models.DateField(blank=True)),
                ('volume', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='liblary.book')),
            ],
        ),
        migrations.CreateModel(
            name='LentInfo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('lent_date', models.DateField(blank=True)),
                ('return_date', models.DateField(blank=True)),
                ('borrower', models.CharField(max_length=100, null=True)),
                ('volume', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='liblary.book')),
            ],
        ),
        migrations.CreateModel(
            name='Collection',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('collection', models.CharField(choices=[('bookshelf', 'bookshelf'), ('wish_list', 'wish_list')], max_length=20)),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='owner', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='book',
            name='categories',
            field=models.ManyToManyField(blank=True, to='liblary.category'),
        ),
        migrations.AddField(
            model_name='book',
            name='collections',
            field=models.ManyToManyField(related_name='collections', to='liblary.collection'),
        ),
        migrations.AddField(
            model_name='book',
            name='purchase_info',
            field=models.OneToOneField(blank=True, on_delete=django.db.models.deletion.CASCADE, to='liblary.purchaseinfo'),
        ),
        migrations.AddField(
            model_name='book',
            name='tags',
            field=models.ManyToManyField(blank=True, to='liblary.tag'),
        ),
    ]
